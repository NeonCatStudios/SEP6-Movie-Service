@page "/movie/"
@using MovieApp.Data
@inject MovieController movieController

<head>
    <title>Movie</title>
</head>

@if (movieCache == null)
{
    <body>
        <div class="spinner"> <img src="img/loading.gif"/></div>
    </body>
}
else
{
    <body>
  <div class="background-container" style="">
      <div class="sub-container">
          <div class="content-box movie-left">
              <p class="movie-title">@movieCache.Title (@movieCache.Year)</p>
              <p>@movieCache.imdbRating★ (@movieCache.imdbVotes)</p>
              <img class="poster" alt="Poster Image" src="@movieCache.Poster"/>
          </div>
          <div class="sub-container">
              <div class="content-box" style="width: 100%">
                  <p>Country | @movieCache.Country</p>
                  <p>Director |
                      @movieCache.Director
                  </p>
                  <p>Writer | @movieCache.Writer</p>
                  <p>Synopsis</p>
                  <p>@movieCache.Plot</p>
              </div>
              <div class="content-box" style="width: 100%;">
                  <p class="actor-list-title">Starring actors</p>
                  <ul class="actor-list">
                      @if (!actorCache.Any())
                      {
                          <li>Loading Data...</li>
                      }
                      else
                      {
                          @foreach (var i in actorCache)
                          {
                              if (i.isInDB)
                              {
                                  <li><a href="../person/@i.id">@i.name @(Utils.YearFilter(@i.birth))</a></li>
                              }
                              else
                              {
                                  <li>@i.name</li>
                              }
                          }
                      }
                  </ul>
              </div>
          </div>
      </div>
  </div>
  </body>  
}
@code
{
    [Parameter]
    [SupplyParameterFromQuery(Name = "movieId")]
    public String movieId { get; set; } = "";

    private List<Person> actorCache = new List<Person>();
    private String RatingString;
    private Person directorCache = new Person();
    public OMDBMovie movieCache = null;

    protected override async Task OnInitializedAsync()
    {
        directorCache.birth = 0;
        movieId = "tt" + movieId ?? "";
        await Task.Run(() => GetMovieInfo(movieId) );
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        checkActorsInDB(movieId);
        return base.OnAfterRenderAsync(firstRender);
    }

    public async Task GetMovieInfo(String movieIdMethod)
    {
        Console.WriteLine(movieIdMethod);
        movieCache = await movieController.getMovies(movieIdMethod);
        //StateHasChanged();
    }

    public async Task checkActorsInDB(String movieId)
    {
        actorCache = movieController.checkActors(movieId);
        //this.StateHasChanged();
    }

}