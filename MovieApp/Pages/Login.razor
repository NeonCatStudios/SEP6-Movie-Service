@page "/login/"
@namespace LoginComponent
@using MovieApp.Authentication
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject NavigationManager navigation;


<div class="loginForm">
    <AuthorizeView>
        <NotAuthorized>
 
                     <div class="form-group w-50">
                                <label>Email</label>
                                <input type="text" class="form-control" @bind="email"/>
                                <label>Password</label>
                                <input type="password" class="form-control" @bind="password"/>
                                <small class="text-muted">@errorMessage</small>
                            </div>
                            <div class="mt-3">
                                <button @onclick="@TryLogin" class="btn btn-primary LoginButton">Login</button>
                                <button @onclick="@Register" class="btn btn-primary LoginButton">Register</button>
                                <button @onclick="@ResetPassword" class="btn btn-primary LoginButton">Reset Password</button>
                            </div>
         
            @if (isSuccessRegister)
            {
                <p style="color: lightgreen">You have succesfully registered and now can log in.</p>
            }
        </NotAuthorized>
    </AuthorizeView>
</div>

@code {
    public String email;
    public String password;
    public String errorMessage;
    public bool isSuccessRegister;

    public async Task TryLogin()
    {
        errorMessage = "";
        try
        {
            await ((AuthenticationProvider)AuthenticationStateProvider).ValidateLogin(email, password);
            navigation.NavigateTo("");

        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        password = "";
    }

    public async Task Register()
    {
        errorMessage = "";
        try
        {
            isSuccessRegister = ((AuthenticationProvider)AuthenticationStateProvider).RegisterUser(email, password);

        }
        catch (Exception e)
        {
            errorMessage = e.Message;
        }
        password = "";
    }

    public async Task ResetPassword()
    {
        if (((AuthenticationProvider)AuthenticationStateProvider).resetPassword(email))
        {
            errorMessage = "Password reset email sent, if user exist.";
        }
    }
}